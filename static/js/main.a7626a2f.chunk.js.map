{"version":3,"sources":["../../src/av-grid-rerender-check.js","../../src/av-grid-renderInfo.js","../../src/av-grid.js","App.js","index.js"],"names":["range","left","right","Array","length","markStickyLeftDirty","rerender","input","i","markStickyRightDirty","markStickyTopDirty","markStickyBottomDirty","markVisibleColumnDirty","old","markVisibleRowDirty","prepareRerender","columnLength","rowLength","rows","r","columns","c","cells","row","col","empty","res","acc","acum","Math","markStickyTopDiffDirty","markStickyBottomDiffDirty","markStickyLeftDiffDirty","markStickyRightDiffDirty","dirtyIndex","oldLength","markDirtyWidth","markDirtyHeight","renderInfoInitialState","visible","top","bottom","rendered","visibleOffset","innerSize","width","height","stickyTopHeight","stickyRightWidth","stickyBottomHeight","stickyLeftWidth","columnStarts","rowStarts","size","rowCount","columnCount","stickyTop","stickyRight","stickyBottom","stickyLeft","scrollBarWidth","scrollBarHeight","stickyTopLeft","stickyTopRight","stickyBottomRight","stickyBottomLeft","map","buildLengthArray","elementCount","elementLength","buildStarts","starts","calcLength","from","count","getLength","elementIndex","getStarts","elementAt","x","lastByDefault","sum","_renderCell","renderData","startRow","startCol","renderCell","newInfo","key","cell","style","display","position","calcRenderInfo","offset","rowHeight","columnWidth","overscanColumn","overscanRow","direction","y","newInnerSize","calcInnerSize","newRange","calcCellRange","cellsRange","calcOffsetRange","rd","calcScrollOffsetX","renderInfo","currOffset","visibleWidth","calcScrollOffsetY","visibleHeight","useStyles","makeStyles","root","flex","border","overflow","container","renderArea","AvGrid","props","ref","onRender","classes","useResizeAware","resizeListener","containerRef","React","offsetRef","setRenderInfo","setRerenderDt","live","setTimeout","updateRenderInfo","oldInfo","scrollTo","newOffset","calcScrollOffset","scrollToRow","scrollToCol","className","onScroll","e","undefined","Boolean","zIndex","backgroundColor","marginTop","id","flexDirection","header","borderBottom","marginBottom","borderRight","lineHeight","padding","boxSizing","headerCell","panelCell","block","margin","App","gridRef","useRef","useState","colCount","setColCount","setRowCount","setStickyTop","setStickyLeft","setStickyRight","setStickyBottom","columnWidthNum","setColumnWidthNum","rowHeightNum","setRowHeightNum","widthFunction","setWidthFunction","heightFunction","setHeightFunction","setScrollToRow","setScrollToCol","renderCount","setRenderCount","useCallback","data","isHeader","isPanel","clsx","idx","value","onChange","Number","target","type","checked","onClick","current","cursor","title","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a7626a2f.chunk.js","sourcesContent":["const range = (left, right) => Array.from({length: right - left + 1}, (_, i) => left + i);\r\n\r\nconst  markStickyLeftDirty = (rerender, input) => range(0, input.stickyLeft - 1)\r\n    .forEach(i => rerender.columns[i] = true);\r\n\r\nconst markStickyRightDirty = (rerender, input) => range(input.columnCount - input.stickyRight, input.columnCount - 1)\r\n    .forEach(i => rerender.columns[i] = true);\r\n\r\nconst markStickyTopDirty = (rerender, input) => range(0, input.stickyTop - 1)\r\n    .forEach(i => rerender.rows[i] = true);\r\n\r\nconst markStickyBottomDirty = (rerender, input) => range(1, input.stickyBottom)\r\n    .forEach(i => rerender.rows[input.rowCount - i] = true);\r\n\r\nconst markStickyTopDiffDirty = (rerender, old, input) => \r\n    range(Math.min(old.input.stickyTop, input.stickyTop) + 1, Math.max(old.input.stickyTop, input.stickyTop))\r\n    .forEach(i => rerender.rows[i - 1] = true);\r\n\r\nconst markStickyBottomDiffDirty = (rerender, old, input) => range(1, Math.max(old.input.stickyBottom, input.stickyBottom))\r\n    .forEach(i => rerender.rows[input.rowCount - i] = true);\r\n\r\nconst markStickyLeftDiffDirty = (rerender, old, input) =>\r\n    range(Math.min(old.input.stickyLeft, input.stickyLeft) + 1, Math.max(old.input.stickyLeft, input.stickyLeft))\r\n    .forEach(i => rerender.columns[i - 1] = true);\r\n\r\nconst markStickyRightDiffDirty = (rerender, old, input) => range(1, Math.max(old.input.stickyRight, input.stickyRight))\r\n    .forEach(i => rerender.columns[input.columnCount - i] = true);\r\n\r\nfunction markVisibleColumnDirty(rerender, old, input){\r\n    range(old.rendered.left, old.rendered.right).forEach(i => rerender.columns[i] = true);\r\n    markStickyLeftDirty(rerender, input);\r\n    markStickyRightDirty(rerender, input);\r\n}\r\n\r\nfunction markVisibleRowDirty(rerender, old, input){\r\n    for (let i = old.rendered.top; i <= old.rendered.bottom; i++){\r\n        rerender.rows[i] = true;\r\n    }\r\n    markStickyTopDirty(rerender, input);\r\n    markStickyBottomDirty(rerender, input);\r\n}\r\n\r\nfunction markDirtyWidth(rerender, old, columnLength){\r\n    let res = false;\r\n\r\n    let dirtyIndex = old.columnLength.findIndex((oldLength, idx) => oldLength !== columnLength[idx]);\r\n    if (dirtyIndex < 0){\r\n        return false;\r\n    }\r\n\r\n    if (dirtyIndex < old.rendered.right){\r\n        range(Math.max(dirtyIndex, old.rendered.left), old.rendered.right).forEach(i => rerender.columns[i] = true);\r\n        res = true;\r\n    }\r\n    if (dirtyIndex < old.input.stickyLeft){\r\n        markStickyLeftDirty(rerender, old.input);\r\n        res = true;\r\n    }\r\n    if (old.input.stickyRight && dirtyIndex <= old.input.columnCount - old.input.stickyRight){\r\n        markStickyRightDirty(rerender, old.input);\r\n        res = true;\r\n    }\r\n    \r\n    return res;\r\n}\r\n\r\nfunction markDirtyHeight(rerender, old, rowLength){\r\n    let res = false;\r\n\r\n    let dirtyIndex = old.rowLength.findIndex((oldLength, idx) => oldLength !== rowLength[idx]);\r\n    if (dirtyIndex < 0){\r\n        return false;\r\n    }\r\n\r\n    if (dirtyIndex < old.rendered.bottom){\r\n        range(Math.max(dirtyIndex, old.rendered.top), old.rendered.bottom).forEach(i => rerender.rows[i] = true);\r\n        res = true;\r\n    }\r\n    if (dirtyIndex < old.input.stickyTop){\r\n        markStickyTopDirty(rerender, old.input);\r\n        res = true;\r\n    }\r\n    if (old.input.stickyBottom && dirtyIndex <= old.input.rowCount - old.input.stickyBottom){\r\n        markStickyBottomDirty(rerender, old.input);\r\n        res = true;\r\n    }\r\n    \r\n    return res;\r\n}\r\n\r\nexport function prepareRerender(rerender, old, input, columnLength, rowLength){\r\n    let res;\r\n    let empty;\r\n\r\n    if (!rerender){\r\n        res = {\r\n            rows: {},\r\n            columns: {},\r\n            cells: {}\r\n        }\r\n        empty = true;\r\n    } else {\r\n        const rows = (rerender.rows || []).filter(r => r >= old.rendered.top && r <= old.rendered.bottom);\r\n        const columns = (rerender.columns || []).filter(c => c >= old.rendered.left && c <= old.rendered.right);\r\n        const cells = (rerender.cells || [])\r\n            .filter(({row, col}) => row >= old.rendered.top && row <= old.rendered.bottom &&\r\n                col >= old.rendered.left && col <= old.rendered.right\r\n            );\r\n\r\n        empty = !(rows.length || columns.length || cells.length);\r\n        res = {\r\n            rows: rows.reduce((acc, r) => {acc[r] = true; return acc}, {}),\r\n            columns: columns.reduce((acc, c) => {acc[c] = true; return acc}, {}),\r\n            cells: cells.reduce((acum, {row, col}) => {\r\n                acum[`${row}_${col}`] = true;\r\n                return acum;\r\n            }, {}),\r\n        }\r\n    }\r\n\r\n    if (old.input.stickyTop !== input.stickyTop){\r\n        markStickyTopDiffDirty(res, old, input);\r\n        markStickyLeftDirty(res, input);\r\n        markStickyRightDirty(res, input);\r\n        empty = false;\r\n    }\r\n\r\n    if (old.input.stickyBottom !== input.stickyBottom){\r\n        markStickyBottomDiffDirty(res, old, input);\r\n        empty = false;\r\n    }\r\n\r\n    if (old.input.stickyLeft !== input.stickyLeft){\r\n        markStickyLeftDiffDirty(res, old, input);\r\n        empty = false;\r\n    }\r\n\r\n    if (old.input.stickyRight !== input.stickyRight){\r\n        markStickyRightDiffDirty(res, old, input);\r\n        empty = false;\r\n    }\r\n\r\n    if (old.input.rowCount !== input.rowCount){\r\n        markStickyBottomDirty(res, old.input);\r\n        markStickyBottomDirty(res, input);\r\n        empty = false;\r\n    }\r\n\r\n    if (old.input.columnCount !== input.columnCount){\r\n        markStickyRightDirty(res, old.input);\r\n        markStickyRightDirty(res, input);\r\n        empty = false;\r\n    }\r\n\r\n    if ( (typeof old.columnLength === 'number') ^ (typeof columnLength === 'number') ){\r\n        markVisibleColumnDirty(res, old, input);\r\n        empty = false;\r\n    } else {\r\n        if (typeof columnLength === 'number'){\r\n            if (old.columnLength !== columnLength){\r\n                markVisibleColumnDirty(res, old, input);\r\n                empty = false;\r\n            }\r\n        } else {\r\n            if (markDirtyWidth(res, old, columnLength)){\r\n                empty = false;\r\n            }\r\n        } \r\n    }\r\n\r\n    if ( (typeof old.rowLength === 'number') ^ (typeof rowLength === 'number') ){\r\n        markVisibleRowDirty(res, old, input);\r\n        empty = false;\r\n    } else {\r\n        if (typeof rowLength === 'number'){\r\n            if (old.rowLength !== rowLength){\r\n                markVisibleRowDirty(res, old, input);\r\n                empty = false;\r\n            }\r\n        } else {\r\n            if (markDirtyHeight(res, old, rowLength)){\r\n                empty = false;\r\n            }\r\n        } \r\n    }\r\n    \r\n    if (empty){\r\n        return null;\r\n    }\r\n    \r\n    return res;\r\n}","import {prepareRerender} from './av-grid-rerender-check';\r\n\r\nexport const renderInfoInitialState = {\r\n    visible: {top: 0, right: 0, bottom: 0, left: 0},\r\n    rendered: {top: 0, right: 0, bottom: 0, left: 0},\r\n    visibleOffset: {top: 0, right: 0, bottom: 0, left: 0},\r\n    innerSize: {\r\n        width: 0, \r\n        height: 0,\r\n        stickyTopHeight: 0,\r\n        stickyRightWidth: 0,\r\n        stickyBottomHeight: 0,\r\n        stickyLeftWidth: 0,\r\n    },\r\n    columnLength: [],\r\n    rowLength: [],\r\n    columnStarts: [],\r\n    rowStarts: [],\r\n    input: {\r\n        size: {width: 0, height: 0},\r\n        rowCount: 0,\r\n        columnCount: 0,\r\n        stickyTop: 0,\r\n        stickyRight: 0, \r\n        stickyBottom: 0,\r\n        stickyLeft: 0,\r\n        scrollBarWidth: 0,\r\n        scrollBarHeight: 0,\r\n    },\r\n\r\n    cells: [],\r\n    stickyTop: [],\r\n    stickyLeft: [],\r\n    stickyRight: [],\r\n    stickyBottom: [],\r\n    stickyTopLeft: [],\r\n    stickyTopRight: [],\r\n    stickyBottomRight: [],\r\n    stickyBottomLeft: [],\r\n    map: {},\r\n}\r\n\r\nexport const whiteSpace = 20;\r\n\r\nexport function buildLengthArray(elementCount, elementLength){\r\n    return typeof elementLength === 'number' \r\n        ? elementLength\r\n        : Array.from({length: elementCount}, (v, i) => elementLength(i));\r\n}\r\n\r\nexport function buildStarts(length){\r\n    if (typeof length === 'number'){\r\n        return length;\r\n    }\r\n\r\n    const starts = [...length];\r\n    starts.forEach((_, i) => {\r\n        starts[i] = i === 0\r\n            ? 0\r\n            : starts[i - 1] + length[i - 1];\r\n    })\r\n\r\n    return starts;\r\n}\r\n\r\nfunction calcLength(length, from, count = 1){\r\n    if (typeof length === 'number'){\r\n        return count * length;\r\n    }\r\n\r\n    let res = 0;\r\n    for (let i = from; i < from + count; i++){\r\n        res += length[i];\r\n    }\r\n    return res;\r\n}\r\n\r\nfunction getLength(length, elementIndex){\r\n    return (typeof length === 'number') ? length : length[elementIndex];\r\n}\r\n\r\nfunction getStarts(starts, elementIndex){\r\n    if (typeof starts === 'number'){\r\n        return elementIndex * starts;\r\n    }\r\n    return starts[elementIndex];\r\n}\r\n\r\nfunction elementAt(length, x, lastByDefault = true){\r\n    if (typeof length === 'number'){\r\n        return Math.trunc(x / length);\r\n    }\r\n\r\n    let res = lastByDefault ? length.length - 1 : -1;\r\n    let sum = 0;\r\n    for (let i = 0; i < length.length; i++){\r\n        sum += length[i];\r\n        if (sum > x){\r\n            res = i;\r\n            break;\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nexport const calcInnerSize = (\r\n    rowCount, \r\n    columnCount, \r\n    stickyTop, \r\n    stickyRight, \r\n    stickyBottom,\r\n    stickyLeft,\r\n    columnLength,\r\n    rowLength,\r\n) => ({\r\n    width: calcLength(columnLength, 0, columnCount) + (stickyRight ? 0 : whiteSpace),\r\n    height: calcLength(rowLength, 0, rowCount) + (stickyBottom ? 0 : whiteSpace),\r\n    stickyTopHeight: calcLength(rowLength, 0, stickyTop),\r\n    stickyRightWidth: calcLength(columnLength, columnCount - stickyRight, stickyRight),\r\n    stickyBottomHeight: calcLength(rowLength, rowCount - stickyBottom, stickyBottom),\r\n    stickyLeftWidth: calcLength(columnLength, 0, stickyLeft),\r\n})\r\n\r\nexport function calcCellRange(\r\n    innerSize,\r\n    rowCount, \r\n    columnCount, \r\n    width, \r\n    height, \r\n    offset,\r\n    overscanColumn,\r\n    overscanRow,\r\n    direction,\r\n    columnLength,\r\n    rowLength,\r\n    scrollBarWidth,\r\n    scrollBarHeight\r\n){\r\n    let left = elementAt(columnLength, offset.x + innerSize.stickyLeftWidth);\r\n    let right = elementAt(columnLength, offset.x + width - innerSize.stickyRightWidth - scrollBarWidth);\r\n    left = Math.max(0, left);\r\n    right = Math.min(right, columnCount - 1);\r\n\r\n    let top = elementAt(rowLength, offset.y + innerSize.stickyTopHeight);\r\n    let bottom = elementAt(rowLength, offset.y + height - innerSize.stickyBottomHeight - scrollBarHeight);\r\n    top = Math.max(0, top);\r\n    bottom = Math.min(bottom, rowCount - 1);\r\n\r\n    const rendered = {\r\n        top: direction.y < 0 ? Math.max(0, top - overscanRow) : top,\r\n        right: direction.x > 0 ? Math.min(columnCount - 1, right + overscanColumn) : right,\r\n        bottom: direction.y > 0 ? Math.min(rowCount - 1, bottom + overscanRow) : bottom,\r\n        left: direction.x < 0 ? Math.max(0, left - overscanColumn) : left,\r\n    }\r\n\r\n    return {\r\n        visible: {top, right, bottom, left},\r\n        rendered,\r\n    };\r\n}\r\n\r\nexport const calcOffsetRange = (\r\n    cellsRange, \r\n    rowLength, \r\n    columnLength, \r\n    rowStarts, \r\n    columnStarts, \r\n    size, \r\n    innerSize,\r\n    scrollBarWidth,\r\n    scrollBarHeight\r\n) => ({\r\n    left: getStarts(columnStarts, cellsRange.left) - innerSize.stickyLeftWidth,\r\n    right: calcLength(columnLength, 0, cellsRange.right + 1) - (size.width - innerSize.stickyRightWidth - scrollBarWidth),\r\n    top: getStarts(rowStarts, cellsRange.top) - innerSize.stickyTopHeight,\r\n    bottom: calcLength(rowLength, 0, cellsRange.bottom + 1) - (size.height - innerSize.stickyBottomHeight - scrollBarHeight),\r\n})\r\n\r\nconst _renderCell = (renderData, row, col, startRow = 0, startCol = 0) => {\r\n    const {\r\n        renderCell, \r\n        old, \r\n        newInfo, \r\n        rerender,\r\n        rowLength,\r\n        columnLength,\r\n        rowStarts,\r\n        columnStarts,\r\n    } = renderData;\r\n\r\n    const key = `${row}_${col}`;\r\n    let cell = old.map[key];\r\n    if (!cell || \r\n        (rerender && \r\n            (rerender.cells[key] || rerender.columns[col] || rerender.rows[row])\r\n        )\r\n    ) \r\n    {\r\n        cell = renderCell({\r\n            col, \r\n            row, \r\n            style: {\r\n                display: 'inline-block',\r\n                position: 'absolute',\r\n                left: startCol ? calcLength(columnLength, startCol, col - startCol) : getStarts(columnStarts, col),\r\n                width: getLength(columnLength, col),\r\n                top: startRow ? calcLength(rowLength, startRow, row - startRow) : getStarts(rowStarts, row),\r\n                height: getLength(rowLength, row),\r\n            }, \r\n            key\r\n        });\r\n    }\r\n    newInfo.map[key] = cell;\r\n    return cell;\r\n};\r\n\r\nexport function calcRenderInfo(old, input) {\r\n    const {\r\n        offset, \r\n        size,\r\n        rowCount, \r\n        columnCount, \r\n        rowHeight, \r\n        columnWidth, \r\n        renderCell,\r\n        stickyTop = 0, \r\n        stickyLeft = 0, \r\n        stickyRight = 0,\r\n        stickyBottom = 0,\r\n        overscanColumn,\r\n        overscanRow,\r\n        scrollBarWidth,\r\n        scrollBarHeight,\r\n        direction = {x: 0, y: 0},\r\n    } = input;\r\n\r\n    let {\r\n        rerender,\r\n    } = input;\r\n\r\n    if (direction.x || direction.y){\r\n        //check rendered scroll offset\r\n        if (offset.x >= old.visibleOffset.left &&\r\n            offset.x <= old.visibleOffset.right &&\r\n            offset.y >= old.visibleOffset.top &&\r\n            offset.y <= old.visibleOffset.bottom)\r\n        {\r\n            return old;\r\n        }\r\n    }\r\n\r\n    const columnLength = buildLengthArray(columnCount, columnWidth);\r\n    const rowLength = buildLengthArray(rowCount, rowHeight);\r\n\r\n    const newInnerSize = calcInnerSize(\r\n        rowCount, \r\n        columnCount, \r\n        stickyTop, \r\n        stickyRight, \r\n        stickyBottom,\r\n        stickyLeft,\r\n        columnLength,\r\n        rowLength,\r\n    );\r\n\r\n    const newRange = calcCellRange(\r\n        newInnerSize,\r\n        rowCount, \r\n        columnCount, \r\n        size.width, \r\n        size.height, \r\n        offset,\r\n        overscanColumn,\r\n        overscanRow,\r\n        direction,\r\n        columnLength,\r\n        rowLength,\r\n        scrollBarWidth,\r\n        scrollBarHeight\r\n    );\r\n\r\n    if (old.rendered.top || old.rendered.bottom){\r\n        rerender = prepareRerender(rerender, old, input, columnLength, rowLength);\r\n        if  (!rerender &&\r\n            newRange.visible.left >= old.visible.left && \r\n            newRange.visible.right <= old.visible.right && \r\n            newRange.visible.top >= old.visible.top &&\r\n            newRange.visible.bottom <= old.visible.bottom &&\r\n            newInnerSize.width === old.innerSize.width && \r\n            newInnerSize.height === old.innerSize.height &&\r\n            newInnerSize.stickyTopHeight === old.innerSize.stickyTopHeight &&\r\n            newInnerSize.stickyRightWidth === old.innerSize.stickyRightWidth &&\r\n            newInnerSize.stickyBottomHeight === old.innerSize.stickyBottomHeight &&\r\n            newInnerSize.stickyLeftWidth === old.innerSize.stickyLeftWidth)\r\n        {\r\n            return old;\r\n        }\r\n    } else {\r\n        rerender = null;\r\n    }\r\n\r\n    const columnStarts = buildStarts(columnLength); \r\n    const rowStarts = buildStarts(rowLength);\r\n\r\n    newRange.visibleOffset = calcOffsetRange(\r\n        newRange.visible, \r\n        rowLength, \r\n        columnLength, \r\n        rowStarts, \r\n        columnStarts, \r\n        size,\r\n        newInnerSize,\r\n        scrollBarWidth,\r\n        scrollBarHeight\r\n    );\r\n\r\n    const newInfo = {\r\n        ...newRange,\r\n        innerSize: newInnerSize,\r\n        columnLength,\r\n        rowLength,\r\n        columnStarts,\r\n        rowStarts,\r\n        input: {\r\n            size,\r\n            rowCount,\r\n            columnCount,\r\n            stickyTop, \r\n            stickyRight, \r\n            stickyBottom,\r\n            stickyLeft,\r\n            scrollBarWidth,\r\n            scrollBarHeight,\r\n        },\r\n\r\n        cells: [],\r\n        stickyTop: [],\r\n        stickyLeft: [],\r\n        stickyRight: [],\r\n        stickyBottom: [],\r\n        stickyTopLeft: [],\r\n        stickyTopRight: [],\r\n        stickyBottomRight: [],\r\n        stickyBottomLeft: [],\r\n        map: {}\r\n    }   \r\n\r\n    const rd = {\r\n        renderCell, \r\n        old, \r\n        newInfo, \r\n        rerender,\r\n        rowLength,\r\n        columnLength,\r\n        rowStarts,\r\n        columnStarts,\r\n    };\r\n\r\n    for (let r = newInfo.rendered.top; r <= newInfo.rendered.bottom; r++){\r\n        for (let c = newInfo.rendered.left; c <= newInfo.rendered.right; c++){\r\n            if (r < stickyTop || c < stickyLeft || \r\n                r >= (rowCount - stickyBottom) || \r\n                c >= (columnCount - stickyRight))\r\n            {\r\n                continue;\r\n            }\r\n            newInfo.cells.push(_renderCell(rd, r, c));\r\n        }\r\n    }\r\n\r\n    //sticky top\r\n    for (let r = 0; r < stickyTop; r++){\r\n        for (let c = 0; c < stickyLeft; c++){\r\n            newInfo.stickyTopLeft.push(_renderCell(rd, r, c));\r\n        }\r\n        for (let c = Math.max(stickyLeft, newInfo.rendered.left); c <= Math.min(newInfo.rendered.right, columnCount - stickyRight - 1); c++){\r\n            newInfo.stickyTop.push(_renderCell(rd, r, c));\r\n        }\r\n        for (let c = (columnCount - stickyRight); c < columnCount; c++){\r\n            newInfo.stickyTopRight.push(_renderCell(rd, r, c, 0, columnCount - stickyRight));\r\n        }\r\n    }\r\n\r\n    //sticky bottom\r\n    for (let r = rowCount - stickyBottom; r < rowCount; r++){\r\n        for (let c = 0; c < stickyLeft; c++){\r\n            newInfo.stickyBottomLeft.push(_renderCell(rd, r, c, rowCount - stickyBottom, 0));\r\n        }\r\n        for (let c = Math.max(stickyLeft, newInfo.rendered.left); c <= Math.min(newInfo.rendered.right, columnCount - stickyRight - 1); c++){\r\n            newInfo.stickyBottom.push(_renderCell(rd, r, c, rowCount - stickyBottom, 0));\r\n        }\r\n        for (let c = (columnCount - stickyRight); c < columnCount; c++){\r\n            newInfo.stickyBottomRight.push(_renderCell(rd, r, c, rowCount - stickyBottom, columnCount - stickyRight));\r\n        }\r\n    }\r\n\r\n    //sticky left and right\r\n    for (let r = Math.max(stickyTop, newInfo.rendered.top); r <= Math.min(newInfo.rendered.bottom, rowCount - stickyBottom - 1); r++){\r\n        for (let c = 0; c < stickyLeft; c++){\r\n            newInfo.stickyLeft.push(_renderCell(rd, r, c, stickyTop, 0));\r\n        }\r\n        for (let c = (columnCount - stickyRight); c < columnCount; c++){\r\n            newInfo.stickyRight.push(_renderCell(rd, r, c, stickyTop,  columnCount - stickyRight));\r\n        }\r\n    }\r\n\r\n    return newInfo;\r\n}\r\n\r\nexport function calcScrollOffsetX(col, renderInfo, currOffset){\r\n    const cell = {\r\n        left: getStarts(renderInfo.columnStarts, col),\r\n        right: calcLength(renderInfo.columnLength, 0, col + 1),\r\n    }\r\n\r\n    const size = renderInfo.input.size;\r\n    let res = {...currOffset};\r\n\r\n    const visibleWidth = size.width - renderInfo.innerSize.stickyRightWidth - renderInfo.input.scrollBarWidth;\r\n    if (res.x + visibleWidth < cell.right){\r\n        res.x = cell.right - visibleWidth;\r\n    } else if (res.x > cell.left - renderInfo.innerSize.stickyLeftWidth){\r\n        res.x = cell.left - renderInfo.innerSize.stickyLeftWidth;\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nexport function calcScrollOffsetY(row, renderInfo, currOffset){\r\n    const cell = {\r\n        top: getStarts(renderInfo.rowStarts, row),\r\n        bottom: calcLength(renderInfo.rowLength, 0, row + 1),\r\n    }\r\n\r\n    const size = renderInfo.input.size;\r\n    let res = {...currOffset};\r\n\r\n    const visibleHeight = size.height - renderInfo.innerSize.stickyBottomHeight - renderInfo.input.scrollBarHeight\r\n    if (res.y + visibleHeight < cell.bottom){\r\n        res.y = cell.bottom - visibleHeight;\r\n    } else if (res.y > cell.top - renderInfo.innerSize.stickyTopHeight){\r\n        res.y = cell.top - renderInfo.innerSize.stickyTopHeight;\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nexport function calcScrollOffset(row, col, renderInfo, currOffset){\r\n    return calcScrollOffsetY(row, renderInfo, calcScrollOffsetX(col, renderInfo, currOffset));\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport useResizeAware from 'react-resize-aware';\r\nimport {renderInfoInitialState, calcRenderInfo, calcScrollOffset,\r\n    calcScrollOffsetY, calcScrollOffsetX} from './av-grid-renderInfo';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        flex: '1 1 auto',\r\n        border: 'solid 1px silver',\r\n        position: 'relative',\r\n        overflow: 'hidden',\r\n        height: 100,\r\n    },\r\n    container: {\r\n        overflow: 'auto',\r\n        // position: 'relative',\r\n    },\r\n    renderArea: {\r\n        position: 'relative',\r\n    },\r\n})\r\n\r\nconst AvGrid = React.forwardRef(function AvGrid(props, ref){\r\n    const {\r\n        rowCount,\r\n        columnCount,\r\n        renderCell,\r\n        rowHeight = 32, //or function (index) => height;\r\n        columnWidth = 120, //or function (index) => width;\r\n        stickyTop = 0,\r\n        stickyLeft = 0,\r\n        stickyRight = 0,\r\n        stickyBottom = 0,\r\n        overscanColumn = 0,\r\n        overscanRow = 0,\r\n        onRender,\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [resizeListener, size] = useResizeAware();\r\n    const containerRef = React.useRef();\r\n\r\n    const offsetRef = React.useRef({x: 0, y: 0});\r\n    const [renderInfo, setRenderInfo] = React.useState(renderInfoInitialState);\r\n\r\n    // eslint-disable-next-line\r\n    const [rerenderDt, setRerenderDt] = React.useState();\r\n  \r\n    const scrollBarWidth = containerRef.current\r\n        ? containerRef.current.offsetWidth - containerRef.current.clientWidth\r\n        : 0;\r\n    const scrollBarHeight = containerRef.current\r\n        ? containerRef.current.offsetHeight - containerRef.current.clientHeight\r\n        : 0;\r\n\r\n    React.useEffect(() => {\r\n        let live = true;\r\n        setTimeout(() => {\r\n            if (live && containerRef.current && (\r\n                renderInfo.input.scrollBarWidth !== (containerRef.current.offsetWidth - containerRef.current.clientWidth) ||\r\n                renderInfo.input.scrollBarHeight !== (containerRef.current.offsetHeight - containerRef.current.clientHeight)\r\n            )){\r\n                setRerenderDt(new Date());\r\n            }\r\n        }, 50)\r\n        return () => live = false;\r\n    }, [renderInfo, setRerenderDt])\r\n\r\n    const updateRenderInfo = React.useCallback((oldInfo, rerender, direction) => {\r\n        const newInfo = calcRenderInfo(oldInfo, {\r\n            offset: offsetRef.current, \r\n            size, \r\n            rowCount, \r\n            columnCount, \r\n            rowHeight, \r\n            columnWidth, \r\n            renderCell,\r\n            stickyTop, \r\n            stickyLeft,\r\n            stickyRight,\r\n            stickyBottom,\r\n            rerender,\r\n            overscanColumn,\r\n            overscanRow,\r\n            direction,\r\n            scrollBarWidth,\r\n            scrollBarHeight,\r\n        })\r\n        if (newInfo !== oldInfo)\r\n        setRenderInfo(newInfo);\r\n    }, [size, rowCount, columnCount, rowHeight, columnWidth, setRenderInfo, renderCell,\r\n        stickyTop, stickyLeft, stickyRight, stickyBottom, overscanColumn, overscanRow,\r\n        scrollBarWidth, scrollBarHeight])\r\n\r\n    const scrollTo = React.useCallback((row, col) => {\r\n        if (containerRef.current){\r\n            const newOffset = calcScrollOffset(row, col, renderInfo, offsetRef.current);\r\n            containerRef.current.scrollLeft = newOffset.x;\r\n            containerRef.current.scrollTop = newOffset.y;\r\n        }\r\n    }, [renderInfo])\r\n\r\n    const scrollToRow = React.useCallback(row => {\r\n        if (containerRef.current){\r\n            const newOffset = calcScrollOffsetY(row, renderInfo, offsetRef.current);\r\n            containerRef.current.scrollTop = newOffset.y;\r\n        }\r\n    }, [renderInfo])\r\n\r\n    const scrollToCol = React.useCallback(col => {\r\n        if (containerRef.current){\r\n            const newOffset = calcScrollOffsetX(col, renderInfo, offsetRef.current);\r\n            containerRef.current.scrollLeft = newOffset.x;\r\n        }\r\n    }, [renderInfo])\r\n\r\n    const onScroll = e => {\r\n        const {scrollLeft: x, scrollTop: y} = e.target;\r\n        const direction = {x: x - offsetRef.current.x, y: y - offsetRef.current.y}\r\n        offsetRef.current = {x, y};\r\n        updateRenderInfo(renderInfo, undefined, direction);\r\n    }\r\n    \r\n    React.useEffect(() => {\r\n        updateRenderInfo(renderInfo);\r\n    }, \r\n    // eslint-disable-next-line\r\n    [updateRenderInfo])\r\n\r\n    React.useImperativeHandle(ref, () => ({\r\n        updateRenderInfo: rerender => updateRenderInfo(renderInfo, rerender),\r\n        scrollTo: (row, col) => scrollTo(row, col),\r\n        scrollToRow: row => scrollToRow(row),\r\n        scrollToCol: col => scrollToCol(col),\r\n    }));\r\n\r\n    // console.log(\"RENDER\");\r\n    onRender && onRender();\r\n\r\n    return (\r\n        <div \r\n            className={classes.root}\r\n        >\r\n            {resizeListener}\r\n            <div \r\n                ref={containerRef}\r\n                className={classes.container}\r\n                style={{\r\n                    width: size.width,\r\n                    height: size.height,\r\n                }}\r\n                onScroll={onScroll}\r\n            >\r\n                <div \r\n                    className={classes.renderArea}\r\n                    style={{\r\n                        width: renderInfo.innerSize.width,\r\n                        height: renderInfo.innerSize.height,\r\n                    }}\r\n                >\r\n                    {Boolean(stickyTop) &&\r\n                        <div\r\n                            style={{\r\n                                top: 0,\r\n                                width: renderInfo.innerSize.width,\r\n                                height: renderInfo.innerSize.stickyTopHeight,\r\n                                position: 'sticky',\r\n                                zIndex: 2,\r\n                                backgroundColor: 'white',\r\n                            }}\r\n                        >\r\n                            {Boolean(stickyLeft) &&\r\n                                <div\r\n                                    style={{\r\n                                        display: 'inline-block',\r\n                                        left: 0,\r\n                                        height: renderInfo.innerSize.stickyTopHeight,\r\n                                        width: renderInfo.innerSize.stickyLeftWidth,\r\n                                        position: 'sticky',\r\n                                        zIndex: 3,\r\n                                        backgroundColor: 'white',\r\n                                    }}\r\n                                >\r\n                                    {renderInfo.stickyTopLeft}\r\n                                </div>\r\n                            }\r\n                            {Boolean(stickyRight) &&\r\n                                <div\r\n                                    style={{\r\n                                        display: 'inline-block',\r\n                                        left: size.width - renderInfo.innerSize.stickyRightWidth - scrollBarWidth,\r\n                                        height: renderInfo.innerSize.stickyTopHeight,\r\n                                        width: renderInfo.innerSize.stickyRightWidth,\r\n                                        position: 'sticky',\r\n                                        zIndex: 3,\r\n                                        backgroundColor: 'white',\r\n                                    }}\r\n                                >\r\n                                    {renderInfo.stickyTopRight}\r\n                                </div>\r\n                            }\r\n                            {renderInfo.stickyTop}\r\n                        </div>\r\n                    }\r\n                    {Boolean(stickyBottom) &&\r\n                        <div\r\n                            style={{\r\n                                top: size.height - renderInfo.innerSize.stickyBottomHeight - scrollBarHeight,\r\n                                width: renderInfo.innerSize.width,\r\n                                height: renderInfo.innerSize.stickyBottomHeight,\r\n                                position: 'sticky',\r\n                                zIndex: 2,\r\n                                backgroundColor: 'white',\r\n                            }}\r\n                        >\r\n                            {Boolean(stickyLeft) &&\r\n                                <div\r\n                                    style={{\r\n                                        display: 'inline-block',\r\n                                        left: 0,\r\n                                        height: renderInfo.innerSize.stickyBottomHeight,\r\n                                        width: renderInfo.innerSize.stickyLeftWidth,\r\n                                        position: 'sticky',\r\n                                        zIndex: 3,\r\n                                        backgroundColor: 'white',\r\n                                    }}\r\n                                >\r\n                                    {renderInfo.stickyBottomLeft}\r\n                                </div>\r\n                            }\r\n                            {Boolean(stickyRight) &&\r\n                                <div\r\n                                    style={{\r\n                                        display: 'inline-block',\r\n                                        left: size.width - renderInfo.innerSize.stickyRightWidth - scrollBarWidth,\r\n                                        height: renderInfo.innerSize.stickyBottomHeight,\r\n                                        width: renderInfo.innerSize.stickyRightWidth,\r\n                                        position: 'sticky',\r\n                                        zIndex: 3,\r\n                                        backgroundColor: 'white',\r\n                                    }}\r\n                                >\r\n                                    {renderInfo.stickyBottomRight}\r\n                                </div>\r\n                            }\r\n                            {renderInfo.stickyBottom}\r\n                        </div>\r\n                    }\r\n                    {Boolean(stickyLeft) && \r\n                        <div\r\n                            style={{\r\n                                display: 'inline-block',\r\n                                left: 0,\r\n                                width: renderInfo.innerSize.stickyLeftWidth,\r\n                                height: renderInfo.innerSize.height - (renderInfo.innerSize.stickyTopHeight + renderInfo.innerSize.stickyBottomHeight),\r\n                                zIndex: 1,\r\n                                position: 'sticky',\r\n                                backgroundColor: 'white',\r\n                                marginTop: -(renderInfo.innerSize.stickyBottomHeight),\r\n                            }}\r\n                        >\r\n                            {renderInfo.stickyLeft}\r\n                        </div>\r\n                    }\r\n                    {Boolean(stickyRight) &&\r\n                        <div\r\n                            id=\"stickyRight\"\r\n                            style={{\r\n                                display: 'inline-block',\r\n                                left: size.width - renderInfo.innerSize.stickyRightWidth - scrollBarWidth,\r\n                                width: renderInfo.innerSize.stickyRightWidth,\r\n                                height: renderInfo.innerSize.height - (renderInfo.innerSize.stickyTopHeight + renderInfo.innerSize.stickyBottomHeight),\r\n                                zIndex: 1,\r\n                                position: 'sticky',\r\n                                backgroundColor: 'white',\r\n                                marginTop: -renderInfo.innerSize.stickyBottomHeight,\r\n                            }}\r\n                        >\r\n                            {renderInfo.stickyRight}\r\n                        </div>\r\n                    }\r\n                    {renderInfo.cells}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default React.memo(AvGrid);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {AvGrid} from 'av-grid';\nimport clsx from 'clsx';\n\nconst lineHeight = 36;\n\nconst useStyles = makeStyles({\n    root: {\n        border: 'solid 1px silver',\n        position: 'absolute',\n        left: 5, \n        right: 5,\n        top: 5,\n        bottom: 5,\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    container: {\n        flex: '1 1 auto',\n        display: 'flex',\n        flexDirection: 'column',\n        // border: 'solid 1px blue',\n    },\n    header: {\n        borderBottom: 'solid 1px silver',\n        marginBottom: 10,\n        position: 'relative',\n    },\n    cell: {\n        borderRight: 'solid 1px silver',\n        borderBottom: 'solid 1px silver',\n        lineHeight: `${lineHeight}px`,\n        padding: '0px 4px',\n        boxSizing: 'border-box',\n        backgroundColor: 'white',\n        \"&:hover\": {\n            backgroundColor: 'rgba(0, 0, 0, 0.05)',\n        }\n    },\n    headerCell: {\n        backgroundColor: 'rgba(0, 0, 0, 0.1)',\n        \"&:hover\": {\n            backgroundColor: 'rgba(0, 0, 0, 0.15)',\n        }\n    },\n    panelCell: {\n        backgroundColor: 'rgba(0, 0, 200, 0.1)',\n        \"&:hover\": {\n            backgroundColor: 'rgba(0, 0, 200, 0.15)',\n        }\n    },\n    block: {\n        display: 'inline-block',\n        margin: 4,\n        padding: 4,\n        border: 'solid 1px silver',\n    }\n});\n\nexport default function App() {\n    const classes = useStyles();\n    const gridRef = React.useRef();\n\n    const [colCount, setColCount] = React.useState(20);\n    const [rowCount, setRowCount] = React.useState(100);\n\n    const [stickyTop, setStickyTop] = React.useState(1);\n    const [stickyLeft, setStickyLeft] = React.useState(1);\n    const [stickyRight, setStickyRight] = React.useState(1);\n    const [stickyBottom, setStickyBottom] = React.useState(1);\n\n    const [columnWidthNum, setColumnWidthNum] = React.useState(120);\n    const [rowHeightNum, setRowHeightNum] = React.useState(32);\n    const [widthFunction, setWidthFunction] = React.useState(false);\n    const [heightFunction, setHeightFunction] = React.useState(false);\n    const [scrollToRow, setScrollToRow] = React.useState(0);\n    const [scrollToCol, setScrollToCol] = React.useState(0);\n\n    const [renderCount, setRenderCount] = React.useState(0);\n\n    const renderCell = React.useCallback(data => {\n        const {col, row, style, key} = data;\n        const isHeader = (row < stickyTop || row >= (rowCount - stickyBottom));\n        const isPanel = (col < stickyLeft || col >= (colCount - stickyRight));\n\n        return (\n            <div \n                style={style} \n                key={key} \n                className={clsx(classes.cell, {\n                    [classes.panelCell]: isPanel && !isHeader,\n                    [classes.headerCell]: isHeader,\n                })}\n            >\n                {row}:{col}\n            </div>\n        )\n    }, [classes, colCount, rowCount, stickyTop, stickyLeft, stickyRight, stickyBottom])\n\n    const onRender = React.useCallback(() => {\n        setTimeout(() => setRenderCount(old => old + 1), 5);\n    }, [setRenderCount]);\n\n    const columnWidth = React.useCallback(idx => (idx % 2 === 0) ? columnWidthNum * 2 : columnWidthNum, [columnWidthNum]);\n    const rowHeight = React.useCallback(idx => (idx % 2 === 0) ? rowHeightNum * 2 : rowHeightNum, [rowHeightNum]);\n\n    const renderHeader = () => (\n        <div className={classes.header}>\n            <div className={classes.block}>\n                Row Count: <input value={rowCount} onChange={e => setRowCount(Number(e.target.value) || 0)} style={{width: 60}}/>\n                <br/>\n                Column Count: <input value={colCount} onChange={e => setColCount(Number(e.target.value) || 0)} style={{width: 60}}/>\n            </div>\n            <div className={classes.block}>\n                Sticky Top: <input value={stickyTop} onChange={e => setStickyTop(Number(e.target.value) || 0)} style={{width: 60}}/>\n                Sticky Right: <input value={stickyRight} onChange={e => setStickyRight(Number(e.target.value) || 0)} style={{width: 60}}/>\n                <br/>\n                Sticky Left: <input value={stickyLeft} onChange={e => setStickyLeft(Number(e.target.value) || 0)} style={{width: 60}}/>\n                Sticky Bottom: <input value={stickyBottom} onChange={e => setStickyBottom(Number(e.target.value) || 0)} style={{width: 60}}/>\n            </div>\n            <div className={classes.block}>\n                Column Width: <input value={columnWidthNum} onChange={e => setColumnWidthNum(Number(e.target.value) || 0)} style={{width: 60}}/>\n                <input type='checkbox' value={widthFunction} onChange={e => setWidthFunction(e.target.checked)}/> width function\n                <br/>\n                Row Height: <input value={rowHeightNum} onChange={e => setRowHeightNum(Number(e.target.value) || 0)} style={{width: 60}}/>\n                <input type='checkbox' value={heightFunction} onChange={e => setHeightFunction(e.target.checked)}/> height function\n            </div>\n            <div className={classes.block}>\n                <button onClick={() => {\n                    gridRef.current && gridRef.current.scrollTo(scrollToRow, scrollToCol);\n                }}>\n                    Scroll To:\n                </button>\n                <br/>\n                <button onClick={() => gridRef.current && gridRef.current.scrollToRow(scrollToRow)}>Row:</button> \n                <input value={scrollToRow} onChange={e => setScrollToRow(Number(e.target.value) || 0)} style={{width: 40}}/>\n                <button onClick={() => gridRef.current && gridRef.current.scrollToCol(scrollToCol)}>Coll:</button> \n                <input value={scrollToCol} onChange={e => setScrollToCol(Number(e.target.value) || 0)} style={{width: 40}}/>\n            </div>\n\n            <div \n                style={{position: 'absolute', top: 4, right: 4, cursor: 'pointer'}}\n                title=\"Click to zero\"\n                onClick={() => {setRenderCount(0)}}\n            >\n                Render Count: {renderCount}\n            </div>\n        </div>\n    )\n\n    return (\n        <div className={classes.root}>\n            {renderHeader()}\n            <div className={classes.container}>\n                <AvGrid\n                    ref={gridRef}\n                    rowCount={rowCount}\n                    columnCount={colCount}\n                    renderCell={renderCell}\n                    stickyTop={stickyTop}\n                    stickyLeft={stickyLeft}\n                    stickyRight={stickyRight}\n                    stickyBottom={stickyBottom}\n                    columnWidth={widthFunction ? columnWidth: columnWidthNum}\n                    rowHeight={heightFunction ? rowHeight : rowHeightNum}\n                    overscanRow={2}\n                    overscanColumn={0}\n                    onRender={onRender}\n                />\n            </div>\n        </div>\n    );\n}\n\n\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}